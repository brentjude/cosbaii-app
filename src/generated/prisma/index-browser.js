
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  username: 'username',
  password: 'password',
  image: 'image',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reviewedBy: 'reviewedBy',
  isPremiumUser: 'isPremiumUser',
  emailVerified: 'emailVerified',
  emailVerifiedDate: 'emailVerifiedDate',
  emailVerificationCode: 'emailVerificationCode',
  emailVerificationExpires: 'emailVerificationExpires',
  pendingEmail: 'pendingEmail',
  pendingEmailToken: 'pendingEmailToken',
  pendingEmailExpires: 'pendingEmailExpires'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  showCompetitionCounter: 'showCompetitionCounter',
  showBadges: 'showBadges',
  lastDisplayNameChange: 'lastDisplayNameChange',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cosplayerType: 'cosplayerType',
  yearsOfExperience: 'yearsOfExperience',
  specialization: 'specialization',
  skillLevel: 'skillLevel',
  profilePicturePublicId: 'profilePicturePublicId',
  coverImagePublicId: 'coverImagePublicId',
  displayName: 'displayName',
  bio: 'bio',
  profilePicture: 'profilePicture',
  coverImage: 'coverImage',
  instagramUrl: 'instagramUrl',
  facebookUrl: 'facebookUrl',
  twitterUrl: 'twitterUrl',
  tiktokUrl: 'tiktokUrl',
  youtubeUrl: 'youtubeUrl',
  receiveEmailUpdates: 'receiveEmailUpdates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeaturedItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  character: 'character',
  series: 'series',
  type: 'type',
  competitionId: 'competitionId',
  position: 'position',
  award: 'award',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  eventDate: 'eventDate',
  location: 'location',
  organizer: 'organizer',
  competitionType: 'competitionType',
  rivalryType: 'rivalryType',
  level: 'level',
  logoUrl: 'logoUrl',
  eventUrl: 'eventUrl',
  facebookUrl: 'facebookUrl',
  instagramUrl: 'instagramUrl',
  referenceLinks: 'referenceLinks',
  submittedById: 'submittedById',
  status: 'status',
  reviewedById: 'reviewedById',
  reviewedAt: 'reviewedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitionParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  competitionId: 'competitionId',
  cosplayTitle: 'cosplayTitle',
  characterName: 'characterName',
  seriesName: 'seriesName',
  description: 'description',
  position: 'position',
  category: 'category',
  status: 'status',
  order: 'order',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  photos: 'photos',
  videoUrl: 'videoUrl',
  isTeam: 'isTeam',
  teamMembers: 'teamMembers',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AwardsScalarFieldEnum = {
  id: 'id',
  competitionId: 'competitionId',
  title: 'title',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.PhotoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  url: 'url',
  caption: 'caption',
  alt: 'alt',
  photoType: 'photoType',
  character: 'character',
  series: 'series',
  width: 'width',
  height: 'height',
  size: 'size',
  mimeType: 'mimeType',
  createdAt: 'createdAt'
};

exports.Prisma.FeaturedCosplayScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  competitionId: 'competitionId',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  character: 'character',
  series: 'series',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  type: 'type',
  requirement: 'requirement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  awardedAt: 'awardedAt'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  excerpt: 'excerpt',
  slug: 'slug',
  authorId: 'authorId',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  relatedId: 'relatedId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BANNED: 'BANNED'
};

exports.CosplayerType = exports.$Enums.CosplayerType = {
  COMPETITIVE: 'COMPETITIVE',
  HOBBY: 'HOBBY',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.CompetitionType = exports.$Enums.CompetitionType = {
  GENERAL: 'GENERAL',
  ARMOR: 'ARMOR',
  CLOTH: 'CLOTH',
  SINGING: 'SINGING'
};

exports.RivalryType = exports.$Enums.RivalryType = {
  SOLO: 'SOLO',
  DUO: 'DUO',
  GROUP: 'GROUP'
};

exports.CompetitionLevel = exports.$Enums.CompetitionLevel = {
  BARANGAY: 'BARANGAY',
  LOCAL: 'LOCAL',
  REGIONAL: 'REGIONAL',
  NATIONAL: 'NATIONAL',
  WORLDWIDE: 'WORLDWIDE'
};

exports.CompetitionStatus = exports.$Enums.CompetitionStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  ACCEPTED: 'ACCEPTED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.BadgeType = exports.$Enums.BadgeType = {
  PARTICIPATION: 'PARTICIPATION',
  COMPETITION_MILESTONE: 'COMPETITION_MILESTONE',
  SPECIAL_ACHIEVEMENT: 'SPECIAL_ACHIEVEMENT',
  PROFILE_COMPLETION: 'PROFILE_COMPLETION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  UserSettings: 'UserSettings',
  Profile: 'Profile',
  FeaturedItem: 'FeaturedItem',
  Competition: 'Competition',
  CompetitionParticipant: 'CompetitionParticipant',
  Awards: 'Awards',
  Photo: 'Photo',
  FeaturedCosplay: 'FeaturedCosplay',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Blog: 'Blog',
  Feedback: 'Feedback',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
